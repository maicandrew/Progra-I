(define p1 (string #\p #\e #\r #\r #\o))
(define p2 (string #\g #\a #\t #\o))
(define p3 (string #\c #\o #\n #\e #\j #\o))
(define p4 (string #\r #\a #\t #\o #\n))
(define p5 (string #\p #\e #\z))
(define p6 (string #\p #\a #\j #\a #\r #\o))
(define p7 (string #\a #\n #\i #\m #\a #\l))
(define p8 (string #\c #\a #\b #\a #\l #\l #\o))
(define palabras (vector p1 p2 p3 p4 p5 p6 p7 p8))
(define cad1 (vector-ref palabras (random 8)))
(define cad2 (make-string (string-length cad1) #\-))
(define cad3 (string-copy cad2))
(define (buscar l cad1 cad2 tam)
  (if (>= tam 0)
      (if (char=? (string-ref cad1 tam) l)
          (begin
             (string-set! cad2 tam l)
             (buscar l cad1 cad2 (- tam 1))
           )
           (buscar l cad1 cad2 (- tam 1))
       )
      (display cad2)
  )
)
(define (letra l)
    (buscar l cad1 cad2 (- (string-length cad1) 1))
)

(define (validarletra l vidas tam)
    (if (and (>= vidas 1) (>= tam 0))
      (if (char=? (string-ref cad1 tam) l)
          (begin
             (string-set! cad2 tam l)
             (validarletra l vidas (- tam 1))
           )
           (validarletra l vidas (- tam 1))
      )
      (if (>= vidas 0)
        (if (string=? cad3  cad2)
          (begin
            (display cad2)
            (display "Vidas restantes: ")
            (display vidas)
            (newline)
            (set! cad3 cad2)
            (validarletra (read-char) (- vidas 1) (- (string-length cad1) 1))
          )
          (begin
            (display cad2)
            (newline)
            (set! cad3 cad2)
            (validarletra (read-char) vidas tam)
          )
       )
        (display "PerdiÃ³")
     )
  )
)

(validarletra (read-char) 5 (- (string-length cad1) 1))